[{"content":"Welcome to SoftwareTrinkets.nl! The website where I blog all the little software and programming endeavours I undertake. I hope this place brings you joy or that it helps you in your own endeavours.\n","date":"22 February 2023","permalink":"/","section":"","summary":"Welcome to SoftwareTrinkets.nl! The website where I blog all the little software and programming endeavours I undertake. I hope this place brings you joy or that it helps you in your own endeavours.","title":""},{"content":"","date":"22 February 2023","permalink":"/posts/","section":"","summary":"","title":""},{"content":"Intro\u003e Intro # So I\u0026rsquo;ve been thinking about creating a game where you\u0026rsquo;re repairing stuff for people, and just helping them out. I\u0026rsquo;m not sure if this is an international thing, but in the Netherlands we have these Repair cafe\u0026rsquo;s. They\u0026rsquo;re a gathering of people, either in a cafe or other place, where there\u0026rsquo;s people who will repair your stuff. You give them your broken device, and they\u0026rsquo;ll attempt to fix it. I think this is such a great concept, and an amazing concept for a chill puzzle game.\nThe full plan\u003e The full plan # My plan for this is to be a chill game, so I also plan to make developing it chill. So this is the plan:\nFind a framework to create this in (PixiJS/BabylonJS/Unity3D/Something else?) Create satisfying puzzle snapping mechanic Create the pieces of a full puzzle (probably a 3D model, but maybe something else) Create a gameloop Add some story (probably minimal) Finding a framework\u003e Finding a framework # For this, I need a framework that is a bit more like a game engine than PixiJS is. I could make this in Unity, but it would not be that big a challenge. And to be a bit utilitarian, I found out that Unity doesn\u0026rsquo;t run natively on Mac ARM chips. I\u0026rsquo;ve been making all these projects on my couch with a fan-less Macbook Air\u0026hellip; I would like it to be at least a bit energy efficient and it would be great if I don\u0026rsquo;t have to install the Rosetta layer.\nUnreal seems a bit overkill for this, I would use Unreal for visually stunning stuff, which this simple puzzle game just isn\u0026rsquo;t going to be.\nEnter: Godot\u003e Enter: Godot # Godot is interesting, it\u0026rsquo;s an open-source game engine that does get mentioned in the same breath as Unity and Unreal. I don\u0026rsquo;t think it\u0026rsquo;s anywhere near as feature complete as either of those two, but seeing that it\u0026rsquo;s open-source and free to use it just has more going for it. Unity has been a money grabby kind of company for a long time now and that just kind of makes you want to avoid working with it.\nGodot: GDScript\u0026hellip;\u003e Godot: GDScript\u0026hellip; # Okay, so we\u0026rsquo;re all on the same page, we love Godot. And I really did, until I was prompted with the choice. Did I want \u0026rsquo;normal\u0026rsquo; Godot, or Godot with Mono to have C# for scripting\u0026hellip; A question of conscience, do I want to go for the known path that will probably be less efficient (C#)? Or do I want to do this right, and go for the option Godot wants me to take.\nBut this introduced me to GDScript, which I was hoping was some kind of secret JavaScript. But no, it\u0026rsquo;s their own custom thing: https://docs.godotengine.org/en/stable/about/faq.html#doc-faq-what-is-gdscript\nTheir reasoning is interesting:\nIn the early days, the engine used the Lua scripting language. Lua is fast, but creating bindings to an object oriented system (by using fallbacks) was complex and slow and took an enormous amount of code. After some experiments with Python, it also proved difficult to embed.\nIt\u0026rsquo;s understandable why they did this, I don\u0026rsquo;t doubt that this is going to be faster than anything else but it does mean that when you want to use this, you have to learn a whole new language. Which isn\u0026rsquo;t great.\nNow, to be fair, I could just download the Mono version, or learn C++. Still though, I was hoping for something a little more friendly. Nevertheless, it seems like a Python kind of scripting language. Shouldn\u0026rsquo;t be too bad, right?\nGodot: First impression\u003e Godot: First impression # When first opening Godot, the first impression is great. You are immediately prompted with a lot of example projects to look into. Which is a great start for a beginner, and prevents people getting lost in an empty scene when opening the program for the first time.\nThis is great, but I wanted to take on the challenge of starting a new project from scratch. I\u0026rsquo;m writing this now, a week later, and if you\u0026rsquo;re starting up Godot thinking it\u0026rsquo;ll be a good time poking around this engine. You\u0026rsquo;re in for a big ol slap in the face. It might just be me, but I found this engine ruthless.\nGodot: Second impression\u003e Godot: Second impression # First off, the different elements are a bit confusing. Nodes, Sprites, Area2D, ColorRect? It wasn\u0026rsquo;t very clear to me what was what and what did what. What was very convenient though was the ability to drag in images, they\u0026rsquo;re automatically Sprites and get added to your scene. And since Sprites seem to be the backbone of this whole thing, that was honestly good stuff.\nNow, the idea was a puzzle game, so I figured I would start with snapping together sprites as a first mechanic. And boy, this was way more of a struggle than I expected. The very first step, was to see if the mouse was over one of my sprites\u0026hellip;. And it was just pain. I\u0026rsquo;ve found a million ways to do this, but none of them worked. I wanted to stick to GDScript, since it seems like the kind of thing that\u0026rsquo;ll pay off later. But wow, this took some persistence to continue with. I had hoped that my dragging and dropping of puzzle pieces was such a basic idea that there would be something for this already. Unfortunately, no such luck. After too many hours of struggling I did manage to get something to work. If you\u0026rsquo;re currently trying to get a similar mouse interaction working in Godot. Mine wasn\u0026rsquo;t working because of the following things:\nI had a random component in my scene that was blocking mouse input from coming through. I didn\u0026rsquo;t have it added to the right component. I didn\u0026rsquo;t know about the signal system in Godot. Notice the first one in bold, that was the most important thing. For whatever reason, there was a component in my scene that was blocking mouse input from going through to the script I was working in.\nThis was set to Stop and was ruining my day.\nAfter that was sorted everything started working, my scripts did what they should have. I also found out about signals in Godot, which is basically event handling. You can have certain events call certain methods in scripts, which is a good time. You can also have that send extra parameters.\nGodot final impression: Pretty cool\u003e Godot final impression: Pretty cool # Honestly after I got over that first bump in the road, Godot was pretty cool to work with. Everything in there seems to have a lot of thought put into it. They also seem to not shy away from braking changes? Which is something you don\u0026rsquo;t encounter a lot anymore.\n","date":"22 February 2023","permalink":"/posts/repaircafegame/","section":"","summary":"Intro\u003e Intro # So I\u0026rsquo;ve been thinking about creating a game where you\u0026rsquo;re repairing stuff for people, and just helping them out. I\u0026rsquo;m not sure if this is an international thing, but in the Netherlands we have these Repair cafe\u0026rsquo;s.","title":"Repair Cafe Game"},{"content":"What\u0026rsquo;s next\u003e What\u0026rsquo;s next # So the plan now is to add a few finishing touches to Spacewar! and then release it on Itch.io. Here\u0026rsquo;s the plan:\nChange the look of one of the ships (find out what the Needle ship looks like) Add the chaos button Trails and starry background for flare Publish the game Finding out what the Needle looks like\u003e Finding out what the Needle looks like # So, our game so far has 2 ships (one controlled by wasd, and one by the arrow keys), but I\u0026rsquo;ve made them both triangles since I\u0026rsquo;ve been basing the look of this one one blurry cool looking picture:\nSpacewar! on the Computer History Museum\u0026rsquo;s PDP-1 in 2007. Source: https://commons.wikimedia.org/wiki/File:Spacewar_screenshot.jpg And since one of the ships is called the Wedge, I assumed it was just a triangle\u0026hellip; But no! Turns out this thing had sick graphics:\nSpacewar! with the Needle and the Wedge in more detail. Source: https://commons.wikimedia.org/wiki/File:Spacewar1.png However, I\u0026rsquo;ve honestly come to love the look of my interpretation of the wedge, I think the simplicity of it just being a triangle adds some charm to it. So now I have to design something that could represent the needle.\nOkay maybe design is a big word for what I ended up with, but allow me to present to you:\nThe Needle The chaos button\u003e The chaos button # Now it\u0026rsquo;s time to add the last feature to this game, a hyperspace button that will move a player to a random position on the screen. However, when using it it has a small chance that it will blow up your ship. Fun! First I\u0026rsquo;ll change the inputs to use \u0026ldquo;wasdq\u0026rdquo; instead of \u0026ldquo;wasd and the spacebar\u0026rdquo;, and \u0026ldquo;ijklu\u0026rdquo; instead of \u0026ldquo;arrows and shift\u0026rdquo;. This will allow me to use the \u0026ldquo;e\u0026rdquo; and \u0026ldquo;o\u0026rdquo; for the new button.\nSo first the functionality is basically to transport the ship to a random point on the map. All this really is, is finding a random point in a circle, which is again just a math problem. I found the answer by using this https://stackoverflow.com/a/9879291, changing it a bit so it works for the PixiJS positioning. And then making that radius a random radius between 0 and 320, which is the total radius of the circle.\nfunction hyperspace(ship){ var randomAngle = Math.random()*Math.PI*2; ship.x = (Math.cos(randomAngle)*(Math.random() * 320)) + 320; ship.y = (Math.sin(randomAngle)*(Math.random() * 320)) + 320; } Next up is having a random chance that the ship will explode when using this. Here\u0026rsquo;s what I ended up with, not the best, but not terrible:\nfunction hyperspace(ship){ const explodeNumber = Math.random(); if(ship.explosionChance \u0026gt; explodeNumber){ app.stage.removeChild(ship); return false; } else{ var randomAngle = Math.random()*Math.PI*2; ship.x = (Math.cos(randomAngle)*(Math.random() * 320)) + 320; ship.y = (Math.sin(randomAngle)*(Math.random() * 320)) + 320; return true; } } Flair!\u003e Flair! # Pazzaz! Hurrah! This is just for fun, adding some stars in the background, and trails following the ships and bullets.\nOkay, so the stars are easy to add, they\u0026rsquo;re just sprites, a bunch of them, very small in the same color as the big star in the middle. However, a trail was one of the hardest things to add. I could probably add it as particles, but it\u0026rsquo;s been difficult (I had major trouble adding the particle system stuff from PixiJS, the suggested thing to do trails without it is to do rope physics stuff?). This chapter was supposed to be fun, not another technical challenge so I\u0026rsquo;m going to postpone the trails and maybe do that later, or not, who knows. Currently the flair is just the stars in the background.\nSlap it on Itch.io\u003e Slap it on Itch.io # Bam, it\u0026rsquo;s just there, it\u0026rsquo;s currently out into the world. It\u0026rsquo;s not really done, but it\u0026rsquo;s playable and I noticed I was sort of dreading continuing with it for some weird reason.\nSpacewar! by SoftwareTrinkets Still though, I\u0026rsquo;m very proud of it! A very bare bones type of game with basically everything made from scratch. Cool stuff. You can find the source-code here if you want to add stuff, or just look around: https://github.com/SoftwareTrinkets/games-in-progress/blob/main/spacewar/index.html\n","date":"14 January 2023","permalink":"/posts/finish-spacewar/","section":"","summary":"What\u0026rsquo;s next\u003e What\u0026rsquo;s next # So the plan now is to add a few finishing touches to Spacewar! and then release it on Itch.io. Here\u0026rsquo;s the plan:\nChange the look of one of the ships (find out what the Needle ship looks like) Add the chaos button Trails and starry background for flare Publish the game Finding out what the Needle looks like\u003e Finding out what the Needle looks like # So, our game so far has 2 ships (one controlled by wasd, and one by the arrow keys), but I\u0026rsquo;ve made them both triangles since I\u0026rsquo;ve been basing the look of this one one blurry cool looking picture:","title":"Finishing Spacewar!"},{"content":"A new game\u003e A new game # Okay, after the wild success of the first game getting 3 plays in the first day (probably my parents), it\u0026rsquo;s time to ride this high and create a new one. After opening up a new BabylonJS playground I wasn\u0026rsquo;t really feeling it. So I think I\u0026rsquo;ll make this next one with PixiJS.\nFrom the PixiJS website: \u0026ldquo;At its heart, PixiJS is a rendering system that uses WebGL (or optionally Canvas) to display images and other 2D visual content. It provides a full scene graph (a hierarchy of objects to render), and provides interaction support to enable handling click and touch events. It is a natural replacement for Flash in the modern HTML5 world, but provides better performance and pixel-level effects that go beyond what Flash could achieve. It is perfect for online games, educational content, interactive ads, data visualization\u0026hellip; any web-based application where complex graphics are important. And coupled with technology such as Cordova and Electron, PixiJS apps can be distributed beyond the browser as mobile and desktop applications.\u0026rdquo;\nSince PixiJS is a 2D rendering engine, it\u0026rsquo;s going to have to be 2D. From the examples on the PixiJS website I get the impression that this engine lends itself well to making stuff that just looks crisp. Like, look at this demo https://pixijs.io/examples/#/demos-advanced/mouse-trail.js it just feels right, you know?\nSpacewar!\u003e Spacewar! # My initial idea was to make a platformer, inspired by one of my favorite games: Fancy Pants. However, it would take a lot of time to get something that would be as smooth as that. So my second idea was to do something inspired by Spacewar!, which is a circular space fighting game. It\u0026rsquo;s also one of the or maybe even the first video game ever made. The wikipedia article is really worth a read if you\u0026rsquo;re into video game history.\nSpacewar! on the Computer History Museum\u0026rsquo;s PDP-1 in 2007. Source: https://commons.wikimedia.org/wiki/File:Spacewar_screenshot.jpg I just think it\u0026rsquo;s such a vibe. The exclamation point at the end of the name is just the cherry on top for me. Also, the fact that it has a circular screen is just very unique. The screen was the same kind they would use for radar.\nWhat actually is \u0026lsquo;Spacewar!\u0026rsquo;?\u003e What actually is \u0026lsquo;Spacewar!\u0026rsquo;? # Here\u0026rsquo;s a good description from the Wikipedia:\nThe game features two spaceships, \u0026ldquo;the needle\u0026rdquo; and \u0026ldquo;the wedge\u0026rdquo;, engaged in a dogfight while maneuvering in the gravity well of a star. Both ships are controlled by human players. Each ship has limited weaponry and fuel for maneuvering, and the ships remain in motion even when the player is not accelerating.\nThis seems doable right? Here\u0026rsquo;s my plan:\nCreate a circular canvas Add an object in the middle of this canvas (the star) Add a spaceship object Add controls to the ship Add gravity to the star, and have this affect the spaceship And after we\u0026rsquo;ve done that we\u0026rsquo;ll see where to go from there.\nCreating a circular canvas\u003e Creating a circular canvas # First off, making a canvas at all. I used the code from the getting started guide. It also mentions setting up a server. However, I\u0026rsquo;m not using any server yet, I want to see how far I can get with just a HTML page. I\u0026rsquo;ve not found a way to make the canvas circular so I\u0026rsquo;m just going to make a square canvas and see if it can be partly transparent next.\nFirst thing was making the background transparent. This wasn\u0026rsquo;t necessarily hard, but there were a number of different answers out there that didn\u0026rsquo;t work for me. This worked though:\nlet app = new PIXI.Application({ width: 640, height: 640, backgroundAlpha: 0}); So, using the getting started guide, and the transparent background thing. I ended up with this to render my background:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script src=\u0026quot;https://pixijs.download/release/pixi.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body style=\u0026quot;background-color:black;\u0026quot;\u0026gt; \u0026lt;script\u0026gt; // Create the application helper and add its render target to the page let app = new PIXI.Application({ width: 640, height: 640, backgroundAlpha: 0}); document.body.appendChild(app.view); const gr = new PIXI.Graphics(); gr.beginFill(0x003000); gr.drawCircle(320, 320, 320); gr.endFill(); app.stage.addChild(gr) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; I added the brilliantly named \u0026lsquo;wedge\u0026rsquo; ship first. Since it\u0026rsquo;s just a triangle, I can also use the graphics to draw this. I then converted it to a Sprite, which is what you need it to be to move it later on.\nconst wedgeGraphics = new PIXI.Graphics(); wedgeGraphics.beginFill(0xccffcc); wedgeGraphics.moveTo(320,210); wedgeGraphics.lineTo(310, 210); wedgeGraphics.lineTo(315, 190); wedgeGraphics.endFill(); var texture = app.renderer.generateTexture(wedgeGraphics); var wedge = new PIXI.Sprite(texture); app.stage.addChild(wedge) So far, I\u0026rsquo;m really enjoying the simplicity of this project. Behold the current fruits of my labor:\nI know, these kinds of graphics just blow your mind right? Jokes aside, I gave it all a green tint to hopefully get that CRT vibe. Eventually I want to see if I can also replicate the previous images fading slowly like it would have on the original screen. But that\u0026rsquo;s just for style points at the end.\nMoving the wedge\u003e Moving the wedge # Since PixiJS isn\u0026rsquo;t an engine, it doesn\u0026rsquo;t really include a lot of the stuff that I\u0026rsquo;m used to when making games. Input handling is one of them, apparently you can just use the \u0026rsquo;normal\u0026rsquo; page key events for this though. For my project, I want to be able to move the wedge in a direction, and rotate it. I found this amazing tutorial that has something specifically for handling input. This is basically all you need if you want to use specific keys to make your sprite go into a specific direction. However, I wanted to have my wedge move into the direction it was pointing at. To my surprise, I found out from my frantic googling that this kind of thing is where you\u0026rsquo;re just really on your own in this framework. I would have to do the math, and I honestly don\u0026rsquo;t think I\u0026rsquo;ve ever had to do that before. I usually just count on the local coordinate system of whatever engine I\u0026rsquo;m using.\nNow, I could probably hack something together to give me this, maybe a container, rotate that, and use a coordinate system there? But since this is also supposed to be a learning project for me (and I\u0026rsquo;m frankly embarrassed that I don\u0026rsquo;t know this top of mind) I set out to implement this myself. It turned out to be honestly shockingly simple, all I needed to do was figure out the direction from the angle I\u0026rsquo;m setting the wedge at. I found this math stackexchange answer and implemented it in what I had set up.\napp.ticker.add((delta) =\u0026gt; { wedge.angle += wedge.VAngle; let direction ={x: Math.cos(wedge.rotation), y: Math.sin(wedge.rotation)}; wedge.x += direction.x * wedge.vy; wedge.y += direction.y * wedge.vy; }); Weirdly, it seemed like the way I had originally drawn my wedge may have been in the wrong direction? For the above to work I had to change the drawing code to this:\nconst wedgeGraphics = new PIXI.Graphics(); wedgeGraphics.beginFill(0xccffcc); wedgeGraphics.moveTo(0, 0); wedgeGraphics.lineTo(0, 10); wedgeGraphics.lineTo(-15, 5); wedgeGraphics.endFill(); All in all, this is what I\u0026rsquo;ve created thus far (I\u0026rsquo;ve taken out the copied over keyboard function to save some space):\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script src=\u0026quot;https://pixijs.download/release/pixi.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body style=\u0026quot;background-color:black;\u0026quot;\u0026gt; \u0026lt;script\u0026gt; function keyboard(value) {} // Create the application helper and add its render target to the page let app = new PIXI.Application({ width: 640, height: 640, backgroundAlpha: 0}); document.body.appendChild(app.view); const backgroundGraphics = new PIXI.Graphics(); backgroundGraphics.beginFill(0x153015); backgroundGraphics.drawCircle(320, 320, 320); backgroundGraphics.endFill(); var texture = app.renderer.generateTexture(backgroundGraphics); var background = new PIXI.Sprite(texture); app.stage.addChild(background) // The star: const startGraphics = new PIXI.Graphics(); startGraphics.beginFill(0xccffcc); startGraphics.drawCircle(325, 325, 5); startGraphics.endFill(); var texture = app.renderer.generateTexture(startGraphics); var star = new PIXI.Sprite(texture); app.stage.addChild(star) // The wedge: const wedgeGraphics = new PIXI.Graphics(); wedgeGraphics.beginFill(0xccffcc); wedgeGraphics.moveTo(0, 0); wedgeGraphics.lineTo(0, 10); wedgeGraphics.lineTo(-15, 5); wedgeGraphics.endFill(); var texture = app.renderer.generateTexture(wedgeGraphics); var wedge = new PIXI.Sprite(texture); app.stage.addChild(wedge) star.x = 325; star.y = 325; wedge.x = 325; wedge.y = 350; wedge.vy = 0; wedge.VAngle = 0; wedge.pivot.x = 5; wedge.pivot.y = 10; const keyObjectUp = keyboard(\u0026quot;w\u0026quot;); keyObjectUp.press = () =\u0026gt; { wedge.vy -= 1; }; const keyObjectDown = keyboard(\u0026quot;s\u0026quot;); keyObjectDown.press = () =\u0026gt; { wedge.vy += 1; }; const keyObjectLeft = keyboard(\u0026quot;a\u0026quot;); keyObjectLeft.press = () =\u0026gt; { wedge.VAngle -= 1; }; const keyObjectRight = keyboard(\u0026quot;d\u0026quot;); keyObjectRight.press = () =\u0026gt; { wedge.VAngle += 1; }; const keyObjectSpace = keyboard(\u0026quot; \u0026quot;); keyObjectSpace.press = () =\u0026gt; { wedge.x = 325; wedge.y = 350; }; app.ticker.add((delta) =\u0026gt; { wedge.angle += wedge.VAngle; let direction ={x: Math.cos(wedge.rotation), y: Math.sin(wedge.rotation)}; wedge.x += direction.x * wedge.vy; wedge.y += direction.y * wedge.vy; }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; I\u0026rsquo;m so happy with this, look at it! It\u0026rsquo;s beautiful. I\u0026rsquo;ve also added the option to press the spacebar to reset the wedge position, since I ended up losing it off the canvas a few times.\nGravity\u003e Gravity # Since we\u0026rsquo;re making a space game, the gravity doesn\u0026rsquo;t come from below. This means the added force can\u0026rsquo;t just come from using the global up vector. It\u0026rsquo;s different for every point in the scene. The good news is that I can use the math we just did to calculate the gravity direction. Then add in the distance from the ship to the sun and we\u0026rsquo;re done. With this new gravity, I also wanted to be able to orbit the star without having to constantly turn or add power. To do this, the power now stays and you have to \u0026lsquo;break\u0026rsquo; to go slower. The same with steering.\nwedge.speed = 0; const keyObjectUp = keyboard(\u0026quot;w\u0026quot;); keyObjectUp.press = () =\u0026gt; { wedge.accelerate = true; }; keyObjectUp.release = () =\u0026gt; { wedge.accelerate = false; }; const keyObjectDown = keyboard(\u0026quot;s\u0026quot;); keyObjectDown.press = () =\u0026gt; { wedge.decelerate = true; }; keyObjectDown.release = () =\u0026gt; { wedge.decelerate = false; }; const keyObjectLeft = keyboard(\u0026quot;a\u0026quot;); keyObjectLeft.press = () =\u0026gt; { wedgeRotation--; }; const keyObjectRight = keyboard(\u0026quot;d\u0026quot;); keyObjectRight.press = () =\u0026gt; { wedgeRotation++; }; const keyObjectSpace = keyboard(\u0026quot; \u0026quot;); keyObjectSpace.press = () =\u0026gt; { wedge.x = 325; wedge.y = 350; }; app.ticker.add((delta) =\u0026gt; { if(wedge.accelerate === true \u0026amp;\u0026amp; wedge.speed \u0026lt; 10){ wedge.speed += delta / 10; } if (wedge.decelerate === true \u0026amp;\u0026amp; wedge.speed \u0026gt; 0){ wedge.speed -= delta / 10; } if(wedge.speed \u0026lt; 0){ wedge.speed = 0; } wedge.angle += (wedgeRotation * (delta)); const angleToStar = angle(wedge.x, wedge.y, star.x, star.y) ; const gravity = {x: Math.cos(angleToStar), y:Math.sin(angleToStar)} const direction = { x: Math.cos(wedge.rotation), y: Math.sin(wedge.rotation) }; const distance = Math.sqrt( Math.pow(star.x - wedge.x, 2) + Math.pow(star.y - wedge.y, 2) ) if (distance \u0026gt; 1){ const gravityByDistance = { x: (gravity.x * ((1/distance))) * 40, y: (gravity.y * ((1/distance))) * 40 } wedge.x += (direction.x * wedge.speed) + gravityByDistance.x; wedge.y += (direction.y * wedge.speed) + gravityByDistance.y; } }); Shooting\u003e Shooting # Shooting turned out to be very easy, I was thinking I had to make a whole collision detection thing. But when I looked at this example I realized that all that collision detection really is, is a distance measurement. For the shooting, I created a function that created the \u0026lsquo;bullets\u0026rsquo; or whatever you want to call the blibs.\nfunction shoot(startPoint){ const startGraphics = new PIXI.Graphics(); startGraphics.beginFill(0xccffcc); startGraphics.drawCircle(startPoint.x, startPoint.y, 2); startGraphics.endFill(); var texture = app.renderer.generateTexture(startGraphics); const shot = new PIXI.Sprite(texture); shot.x = startPoint.x; shot.y = startPoint.y; app.stage.addChild(shot) return shot; } Then adding each of these to an array\nconst newBullet = shoot({x: needle.x , y: needle.y }) const direction = { x: Math.cos(needle.rotation), y: Math.sin(needle.rotation) }; bullets.push({sprite: newBullet, direction: direction, target: wedge }); And then looping through them all, to update the location of each one, and checking if any one of them hit their target yet.\nbullets.forEach((current, i) =\u0026gt; { current.sprite.x += (current.direction.x * (delta * 3)); current.sprite.y += (current.direction.y * (delta * 3)); const notInView = current.sprite.x \u0026gt; app.view.width || current.sprite.y \u0026gt; app.view.height || current.sprite.x \u0026lt; 0 || current.sprite.y \u0026lt; 0; const hitTarget = Math.sqrt(Math.pow(current.sprite.x - current.target.x, 2) + Math.pow(current.sprite.y - current.target.y, 2)) \u0026lt; 5; if(notInView || hitTarget){ app.stage.removeChild(current.sprite); bullets.splice(i, 1); } }); Adding a mask\u003e Adding a mask # This is really starting to look like something now, so I wanted to start on the finishing touches. Currently, the canvas is still square which means that the ships can get out of the green area. Apparently with masks it\u0026rsquo;s possible to hide that. And it turns out, yeah, that\u0026rsquo;s a super easy thing to do. Took me like a minute to find and implement. I don\u0026rsquo;t even have to add a new thing for it. Setting the .mask property of every object in my scene to the backgroundgraphic variable I still had around just does the trick. Done.\nConsequences\u003e Consequences # Can\u0026rsquo;t have actions without consequences, currently while I do check if the bullets have hit the target, there\u0026rsquo;s no consequence for a bullet hitting. For now, I\u0026rsquo;ll make the hit ship disappear. This should also happen when the ship hits the sun in the middle of the circle. Since I already do distance checks for these cases, I can easily tack this onto the existing stuff.\nWrapping up for now\u003e Wrapping up for now # So, let\u0026rsquo;s go back to the original plan:\nCreate a circular canvas - check Add an object in the middle of this canvas (the star) - check Add a spaceship object - check Add controls to the ship - check Add gravity to the star, and have this affect the spaceship - check There\u0026rsquo;s even the working shooting in there now! I\u0026rsquo;m too proud of what I\u0026rsquo;ve done here, it\u0026rsquo;s exactly what I wanted to create at the start of this post. It\u0026rsquo;s not done though, I still haven\u0026rsquo;t figured out how to do the rotation of the ships in a way that works with orbiting the sun. The hyperjump that was in the original Spacewar! is also still missing. But I\u0026rsquo;ve noticed that if I stay on one project for too long, I get lost in the details. It\u0026rsquo;s probably best to let this cool down for a while and continue later. I\u0026rsquo;ve made a separate GitHub repo for my games in progress, the current state of the Spacewar! clone can be found here.\nIn the end, I rewrote the keyboard interaction and removed the function I found earlier. It was a great tool along the way, but as my project evolved and changed I needed something different to keep it readable.\n","date":"5 January 2023","permalink":"/posts/2d-game/","section":"","summary":"A new game\u003e A new game # Okay, after the wild success of the first game getting 3 plays in the first day (probably my parents), it\u0026rsquo;s time to ride this high and create a new one.","title":"Remaking 'Spacewar!' (the first video game from 1962) with PixiJS"},{"content":"","date":"28 December 2022","permalink":"/tags/domain/","section":"Tags","summary":"","title":"Domain"},{"content":"","date":"28 December 2022","permalink":"/tags/github-actions/","section":"Tags","summary":"","title":"GitHub Actions"},{"content":"","date":"28 December 2022","permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"After creating this site I\u0026rsquo;ve been changing what I want it to look like, created a logo, finished a second post so it wouldn\u0026rsquo;t be that empty when I launched it. After all that procrastination was done it was time to get it online. This turned out to be a little more tricky than I anticipated, so it seemed like a perfect thing to write another blog post about. In this post I\u0026rsquo;ll document:\nHow I went from a local running Hugo generated website to hosting it through GitHub Pages. Creating the automation to build it all through GitHub instead of locally. Setting it up through my custom domain. The reality\u003e The reality # I\u0026rsquo;ve never registered a domain name before, I know, embarrassing. Better late than never though, but it was still a bit daunting. Apparently you can\u0026rsquo;t just google or check the domains, just in case something is watching for that and getting it before you can. So you have to do a terminal check for the domain you want, see if it returns anything. nslookup www.yourdomain.something After checking that the domain was still available I went to the organization that manages names in the Netherlands. https://www.sidn.nl. I\u0026rsquo;m going for a .nl domain, since that\u0026rsquo;s very cheap and good enough for my purposes. The first year of this domain will cost me roughly 1 Euro, hard to beat that kind of price. After that it\u0026rsquo;s about 10 Euro. Something that\u0026rsquo;s also good to keep in mind, there\u0026rsquo;s cheap options where you get both hosting and they\u0026rsquo;ll get a domain name for you. However, after that you don\u0026rsquo;t own the domain name, and if you want to switch to another service you\u0026rsquo;re basically out of luck. So you need a registrar to manage all that yourself.\nGetting the site on GitHub Pages\u003e Getting the site on GitHub Pages # After getting the domain, I thought something low-stakes would be to get the site on \u0026lsquo;GitHub Pages\u0026rsquo; page first. Getting a page on GitHub pages is actually pretty easy. Once you have the website committed to GitHub you can go into settings and set a branch to go to the \u0026lsquo;GitHub Pages\u0026rsquo; page.\nRunning hugo in your project folder will generate your static website in the public folder. You can then put this on a separate branch and set the GitHub Pages settings to start there.\nHOWEVER\nAfter putting the generated site on the separate branch I thought this would be it, set it and forget it. But nothing worked, I only saw raw HTML and a bunch of 404\u0026rsquo;s. I could see the files in the branch, but they couldn\u0026rsquo;t be found for some reason.\nSet the baseURL in the config.toml\u003e Set the baseURL in the config.toml # I didn\u0026rsquo;t really understand what this setting was for when I was building the website, but I\u0026rsquo;ve found out the hard way. If the baseURL isn\u0026rsquo;t set to the url that the website is on, it will not work. It will only show you some static html and nothing else. For GitHub Pages you need both the domain and the repo name, so in my case that is:\nbaseURL = \u0026quot;https://softwaretrinkets.github.io/software-trinkets-website/\u0026quot; After I got that right, I was able to see the site correctly. I did get into trouble with my themes folder disappearing when I switched to put a new version on the gh-pages branch. Which leads us directly to the next point.\nAutomating\u003e Automating # I honestly feel like I can\u0026rsquo;t be seen with a website that requires me to manually move a folder to a branch, that just doesn\u0026rsquo;t feel right. So I moved straight on to automation, there already is some automation in the project which was generated for the GitHub Pages. Deployment seems like too big a word for copying over a folder from the main branch to the gh-pages branch, but it seems like exactly the kind of thing that\u0026rsquo;s kind of tricky to do manually but super easy to do with automation.\nI found this thread: https://github.com/actions/checkout/discussions/405\nWhich is discussing the exact thing I want to do here. In case this is the first time you\u0026rsquo;re dealing with automation, here\u0026rsquo;s what you do. First, go to the Actions tab in GitHub:\nOn this page, you can create a new workflow by clicking New workflow\nNext, select set up a workflow yourself, this will create a main.yml for your automation\nIn this file, put I just put the automation from the GitHub Actions thread.\nname: Deploy Site on: workflow_dispatch: push: paths-ignore: - '.github/**' # Ignore changes towards the .github directory branches: - main # Only trigger on the development branch jobs: build: runs-on: ubuntu-latest steps: - name: Perform Checkout uses: actions/checkout@v2 - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public publish_branch: gh-pages After committing this straight to main, we\u0026rsquo;re all ready to run it! This automation should copy the public folder (publish_dir: ./public), which will then trigger the earlier GitHub Pages automation which serves everything to the https://softwaretrinkets.github.io/software-trinkets-website/ site\nFor me, this worked, huzzah! Now I only have to run hugo locally and push the changes to main for it to automatically pick them up and deploy them through the gh-pages branch. But we can take it further than this\u0026hellip; Wouldn\u0026rsquo;t it be more impressive if we didn\u0026rsquo;t even have to run hugo locally?\nSince Hugo is a pretty big static site generation framework, someone already made a GitHub action for this! Look at it! So next we can basically copy this and use it for our own automation. I only needed minor changes to make it do what I needed it to do. I updated the Hugo version to the one I was using locally, and added publish_branch: gh-pages at the bottom to make the changes go to that branch specifically:\nname: Run Hugo and deploy to branch on: workflow_dispatch: push: paths-ignore: - '.github/**' # Ignore changes towards the .github directory branches: - main # Only trigger on the development branch jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.108.0' # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == 'refs/heads/main' }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public publish_branch: gh-pages And BAM, now I only have to push my content to the repo, and it will automatically build a new website, and deploy it to GitHub Pages. Even though it wasn\u0026rsquo;t that much work to set up this automation, it\u0026rsquo;ll save me so much time now that I don\u0026rsquo;t have to copy over the public folder to a branch myself. With the added benefit that I don\u0026rsquo;t even have to build locally anymore.\nConfiguring my own domain\u003e Configuring my own domain # The last step is to connect the site hosted on GitHub to my custom domain ( www.softwaretrinkets.nl), I first set this in the settings of my repo:\nAfter which I followed this guide on how to set up my DNS settings. Changing something about DNS settings is going to take a while to take effect, so after I added the CNAME to a template in the DNS settings I basically had to hope I did it right and wait for up to 24 hours. If you did it right, you should see the CNAME added when you run:\ndig www.yourdomain.something +nostats +nocomments +nocmd After about 5 hours, it updated and I had a bit of a confusing time figuring out if I had done it correctly. Since GitHub kept hitting me with the following message:\nGitHub also removed the url from its field when I came back to it again. However, after going to the url a few times, I could see that something was being hosted there. I guess this just takes a while, after changing the baseURL again in the config.toml to my custom domain everything showed up as it should.\nAddendum, resolving issues with GitHub Pages forgetting the link to my custom URL\u003e Addendum, resolving issues with GitHub Pages forgetting the link to my custom URL # I was experiencing some very weird behavior, where GitHub was forgetting my custom domain. I thought this was due to my DNS settings, but I didn\u0026rsquo;t really get anything when I googled for the warning I got:\nThen, when looking through the commits on the gh-pages branch I noticed it kept adding the CNAME file that has my domain in it, every time I would add the website URL again in the settings. Which is when I finally noticed that every time my automation ran, it would remove the CNAME file GitHub Pages adds. And it\u0026rsquo;s only then that I found the official documentation on how to host on GitHub Pages with Hugo\u0026hellip; Woops?\nAND I think the error I keep seeing is because I\u0026rsquo;ve only set up www.softwaretrinkets.nl, and not softwaretrinkets.nl. I\u0026rsquo;m trying to set that up using the documentation on apex domains. In my DNS settings, I do not see ALIAS or ANAME. I\u0026rsquo;m trying to see if I can do this with just the A, since I think I misconfigured that in the beginning. I\u0026rsquo;ve added all the GitHub IP Addresses with one of those, but I left the www.@ in front of it.\nAfter waiting a full day, it redirects softwaretrinkets.nl to www.softwaretrinkets.nl and the warning is also gone in the GitHub Pages settings. Huzzah!\n","date":"28 December 2022","permalink":"/posts/publishsite/","section":"","summary":"After creating this site I\u0026rsquo;ve been changing what I want it to look like, created a logo, finished a second post so it wouldn\u0026rsquo;t be that empty when I launched it.","title":"Publishing and hosting a website created through Hugo"},{"content":"","date":"28 December 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"24 December 2022","permalink":"/tags/babylonjs/","section":"Tags","summary":"","title":"BabylonJS"},{"content":"","date":"24 December 2022","permalink":"/tags/game/","section":"Tags","summary":"","title":"Game"},{"content":"","date":"24 December 2022","permalink":"/tags/itch.io/","section":"Tags","summary":"","title":"Itch.io"},{"content":"Introduction\u003e Introduction # In the last post I\u0026rsquo;ve made a small game, but what use is a game if no-one can play it? So in this post I\u0026rsquo;m going to document how to publish something like this. I\u0026rsquo;ve never done that before with BabylonJS, so we\u0026rsquo;re going to find out how that\u0026rsquo;ll work. I have the following rough plan:\ngenerate a new babylon project on my local machine have it \u0026lsquo;build\u0026rsquo; a html page?? upload that to Itch.io But we\u0026rsquo;ll see what actually happens. Immediately adding to the scope of the game\u003e Immediately adding to the scope of the game # So something that bugged me while showing my game to other is that I can run it on my phone, but I can\u0026rsquo;t interact with it. It\u0026rsquo;s such a small thing to fix, so I\u0026rsquo;ll just quickly add that. Here\u0026rsquo;s what I added to make it work:\nscene.onPointerObservable.add((pointerInfo) =\u0026gt; { if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERTAP) { if (pointerInfo.event.offsetX / canvas.width \u0026lt; (1/3)) { if(score \u0026lt; 50){ BABYLON.Animation.CreateAndStartAnimation(\u0026quot;boxmove\u0026quot;, box, \u0026quot;position.x\u0026quot;, 60, 5, box.position.x, -2, 0); } else{ box.position.x = -2 } } else if (pointerInfo.event.offsetX / canvas.width \u0026gt; (1/3) \u0026amp;\u0026amp; pointerInfo.event.offsetX / canvas.width \u0026lt; (2/3)){ if(score \u0026lt; 50){ BABYLON.Animation.CreateAndStartAnimation(\u0026quot;boxmove\u0026quot;, box, \u0026quot;position.x\u0026quot;, 60, 5, box.position.x, 0, 0); } else{ box.position.x = 0 } }else if (pointerInfo.event.offsetX / canvas.width \u0026gt; (2/3)){ if(score \u0026lt; 50){ BABYLON.Animation.CreateAndStartAnimation(\u0026quot;boxmove\u0026quot;, box, \u0026quot;position.x\u0026quot;, 60, 5, box.position.x, 2, 0); } else{ box.position.x = 2 } } } }); Playground\nBack to business\u003e Back to business # Okay, no more scope changes, for real this time. Let\u0026rsquo;s create a local version of the game. After working with React and React Native for a while, I immediately went looking for a whole project with dependencies etc. But all you really need is an HTML file and you\u0026rsquo;re good to go. I found a great template here: https://doc.babylonjs.com/setup/starterHTML#minimal-html-template\nThis also has the createScene() function that we\u0026rsquo;ve been working with in the playground. So we can almost drag and drop that in. I just had to add a reference to the BabylonJS GUI library:\n\u0026lt;script src=\u0026quot;https://cdn.babylonjs.com/gui/babylon.gui.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; You can find the whole HTML file here: https://github.com/SoftwareTrinkets/cube-run/blob/main/web/index.html\nIf you open this file in the browser you can immediately play it, no server needed. Wild! This seems very obvious now, but when you\u0026rsquo;re so used to working with all these frameworks it\u0026rsquo;s easy to get into the mindset of having to set up a whole project and running a server etc. Anyway, now that we have this HTML file, we can just upload that to itch.io. If you\u0026rsquo;ve never heard of this, itch.io is a very fun website that makes it easy to upload games. Browser games or ones that run on desktop, it hosts it all. To upload a game to itch.io you first need to make an account there (through the Register button on the homepage). When making my account I ticked the box that said I'm interested in distributing content on itch.io.\nOnce you\u0026rsquo;ve done that, you can go to Dashboard at the top and on the Creator Dashboard select Create new project\nIt\u0026rsquo;s really up to you what you want to add here, but it really speaks for itself once you\u0026rsquo;re here. Once you\u0026rsquo;ve got the description, cover image and tags how you like them, you can publish it by setting the project to Public here:\nAnd badabing badabang we\u0026rsquo;ve got a published game! You can play Cube Run here:\nCube Run by SoftwareTrinkets","date":"24 December 2022","permalink":"/posts/publishcuberun/","section":"","summary":"Introduction\u003e Introduction # In the last post I\u0026rsquo;ve made a small game, but what use is a game if no-one can play it? So in this post I\u0026rsquo;m going to document how to publish something like this.","title":"Publishing a game on Itch.io"},{"content":"Introduction\u003e Introduction # Like many others, I\u0026rsquo;ve always had the dream to develop games, but I\u0026rsquo;ve also have fallen into the very common trap of exploding the scope of the game I\u0026rsquo;m trying to make and then not being able to finish that project. In an attempt to avoid this, I want to create a very simple casual game with minimal graphics and an easy game loop. In this post I\u0026rsquo;m going to document the process of making such a game, how to come up with an idea, the execution of that idea and the hurdles I come across along the way.\nA hyper casual game\u003e A hyper casual game # So before I start I should figure out what this game is going to look like. Doing this before starting can avoid feature creep. So to keep it easy it should be mostly cubes, and for the environment it could be something abstract, scrolling by. That way I don\u0026rsquo;t have to worry too much about input and how the user looks around, they\u0026rsquo;ll just be facing the way that the environment comes from. For platforms, I want to create it for web first this way I can prototype a lot of it through the Babylon Playground\nMy goal is to have the game loop figured out through the Playground, and then move that code to it\u0026rsquo;s own project locally. Eventually I\u0026rsquo;d upload the finished project to itch.io.\nHere\u0026rsquo;s my starting place:\nYou can run this in your browser through this link: https://playground.babylonjs.com/#DSH9NF\nThe cube would stay mostly in the same place, moving from side to side. Now that we\u0026rsquo;ve got this next up is the scrolling environment function.\nThe scrolling environment\u003e The scrolling environment # The scrolling environment is going to be more cubes. First, I\u0026rsquo;m going to make just one. Make it a different color than the \u0026lsquo;player\u0026rsquo;, a random color for now. With Babylon you don\u0026rsquo;t have an Update() function, you have observables. Those can be either on the scene object or on the created objects themselves. As far as I know there\u0026rsquo;s no disadvantage to doing it on the object itself, so I\u0026rsquo;m going to be doing that. First making just one environment cube that scrolls under the player cube.\nHere\u0026rsquo;s the playground link for it: https://playground.babylonjs.com/#DSH9NF#1\nThe next step is to expand on that first scrolling cube and create a bunch of them. This wasn\u0026rsquo;t as easy as I\u0026rsquo;d hoped by just putting the code I used for the one in a for loop. I ended up having to use the scene onBeforeRenderObservable and create a separate loop to set them all. When I tried just looping my first implementation the references didn\u0026rsquo;t get saved and only one of the x cubes would move. So I created two loops, one to create the environment scrolling boxes, and one to add them to the update loop. I also added some variables outside of these loops so I could control the number of scrolling boxes. Each cube also has a random shade of green to keep it visually interesting.\nhttps://playground.babylonjs.com/#DSH9NF#2\nInput\u003e Input # Next is input, I want to experiment with a few things but the basic functionality is to get the cube in one of three positions so it can be on the scrolling cubes. So here I\u0026rsquo;ve mapped the positions to the 1, 2 and 3 keys.\nhttps://playground.babylonjs.com/#DSH9NF#3\nAnd next, smoother movement. Instead of the cube hopping from place to place, we\u0026rsquo;ll add an animation so it moves there in a few frames. I used a built in function to create a new animation instead of defining key frames myself. This might cause a new animation being made and hanging around every time the user presses a key\u0026hellip; But that seems like a perfect problem for future me to solve.\nhttps://playground.babylonjs.com/#DSH9NF#4\nI might map these options to the arrow keys in the future, but for now it\u0026rsquo;s all functional and smooth enough.\nFeedback\u003e Feedback # Next up, we need to communicate to players when it\u0026rsquo;s going well. So we should check when the player block is on top of the environment block. Once we can check that we should give feedback based on that information, probably with both some kind of particle system and a score in text. First checking if the cube is above an environment cube, then adding to a score variable when it is, and finally showing that score variable on screen somewhere.\nI want to avoid using physics just yet, since they add a lot of bloat to a project. So for now, I\u0026rsquo;ll use the Babylon ActionManager and see how far I can get. After some experimentation, this is what that looks like:\nbox.actionManager.registerAction(new BABYLON.ExecuteCodeAction( { trigger: BABYLON.ActionManager.OnIntersectionEnterTrigger, parameter: {mesh: envBox} }, function() {score += 1; console.log(score)}) ); Then using Babylon GUI to get it on screen, I figured top middle was a good place for it since we\u0026rsquo;re not going to be having a lot of other UI. This score is currently only going up, so we need to figure out how to check if there\u0026rsquo;s no platform underneath the player. Without collisions this was a bit of a puzzle, but we have both OnIntersectionEnterTrigger and OnIntersectionExitTrigger, so I ended up just adding a counter. It counts up when OnIntersectionEnterTrigger is called and subtracts when OnIntersectionExitTrigger is called. Then, in the onBeforeRenderObservable, I also count how long this has been zero. If it\u0026rsquo;s been 0 for longer than 30 frames I reset the score to 0.\nhttps://playground.babylonjs.com/#DSH9NF#5\nNext, just for kicks, we\u0026rsquo;ll have the cube \u0026rsquo;take\u0026rsquo; the color of the environment cube it\u0026rsquo;s just intersected with. So the player cube turns the color of the environment cube, and the environment cube turns white. I found that when I just set the cubes their new colors, it felt off. So I added an animation that changes the color in a few frames.\nRaising the stakes\u003e Raising the stakes # Next, making the game a little bit harder. I\u0026rsquo;m going to let the score influence the speed of it. The higher the score, the faster the environment scrolls. I can just add the score to the speed calculation to implement this. I did find that when the score get\u0026rsquo;s too high, everything moves too fast and breaks :D. While fun, I put an if in the calculation so it can never be more than 75. Lastly, a particle system, why not.\n\u0026hellip;.\nOkay, I got lost in particle systems for a few days and in the end it looked terrible. So I\u0026rsquo;m back now and I need to finish this. I ended up going for something way simpler. I spawn a new cube and fade it out. All of this combined makes for a nice bit of feedback.\nDone!\u003e Done! # Time sure flies when you\u0026rsquo;re working out if the little game you\u0026rsquo;ve made is actually fun. But this was meant to be a quick project so this is just what it\u0026rsquo;s going to be.\nhttps://playground.babylonjs.com/#DSH9NF#6\nLol, there\u0026rsquo;s some serious bugs\u003e Lol, there\u0026rsquo;s some serious bugs # Okay, so the plan was to stop it there, but then I played it some more, and a bit longer and I found out that the framerate just slows down after a while. When looking with the debug tools, it was obvious that it was happening immediately when starting the game, even if you didn\u0026rsquo;t do anything\u0026hellip;\nNow, since I wrote and build this almost at the same time, maybe you\u0026rsquo;ve spotted my big mistake already. It\u0026rsquo;s between https://playground.babylonjs.com/#DSH9NF#5 and https://playground.babylonjs.com/#DSH9NF#6. I\u0026rsquo;m not exactly sure how, but I probably misplaced a bracket, so now every frame it was registering a new action for the trigger of the box\u0026hellip; What was helpful here was the absolute frame count, since in the regular fps counter at the bottom of the playground would show a clean 60 fps for the first few minutes to only then drop. This is why I continued on without an idea that there was something wrong.\nAnother thing that I encountered while trying to fix that bug was that I had, for some reason, used var instead of const or let. So for my first fix attempt my coloring animations between the environment cube and the player cube went wrong. It would only take the color of one environment cube, the last one. I kind of expected a problem like this, but not enough to actually change the vars. But it was fixed by changing the var to a let.\nIn the end, I\u0026rsquo;m left with a small game that I\u0026rsquo;m quite content with. Here\u0026rsquo;s all the code if you want that, or a link to the final™ playground https://playground.babylonjs.com/#DSH9NF#8\nvar createScene = function () { var scene = new BABYLON.Scene(engine); var camera = new BABYLON.FreeCamera(\u0026quot;camera1\u0026quot;, new BABYLON.Vector3(0, 5, -10), scene); camera.setTarget(new BABYLON.Vector3(0,3,0)); var environmentBoxes = [] const speed = 100; const numberOfBoxes = 12; let score = 0; let highscore = 0; let intersecting = 0; let framecount = 0; var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\u0026quot;UI\u0026quot;); var bottomPanel = new BABYLON.GUI.StackPanel(); bottomPanel.height = \u0026quot;80px\u0026quot;; bottomPanel.paddingRight = \u0026quot;20px\u0026quot;; bottomPanel.isVertical = true; bottomPanel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_STRETCH; bottomPanel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP; bottomPanel.fontSize = 20; advancedTexture.addControl(bottomPanel); var scoreText = new BABYLON.GUI.TextBlock(); scoreText.text = \u0026quot;Score: \u0026quot; + score; scoreText.width = \u0026quot;100px\u0026quot;; scoreText.color = \u0026quot;white\u0026quot;; scoreText.outlineWidth = \u0026quot;4px\u0026quot;; scoreText.outlineColor = \u0026quot;black\u0026quot;; bottomPanel.addControl(scoreText); var highScoreText = new BABYLON.GUI.TextBlock(); highScoreText.paddingTop = 50 highScoreText.text = \u0026quot;Highscore: \u0026quot; + highscore; highScoreText.width = \u0026quot;200px\u0026quot;; highScoreText.color = \u0026quot;white\u0026quot;; highScoreText.outlineWidth = \u0026quot;4px\u0026quot;; highScoreText.outlineColor = \u0026quot;black\u0026quot;; bottomPanel.addControl(highScoreText); var box = BABYLON.MeshBuilder.CreateBox(\u0026quot;box\u0026quot;, {diameter: 2, segments: 32}, scene); box.position.y = 0.6; box.actionManager = new BABYLON.ActionManager(scene); box.material = new BABYLON.StandardMaterial(); var ghostBoxMaterial = new BABYLON.StandardMaterial(\u0026quot;ghostBoxMaterial\u0026quot;, scene); const changeValueHeader = (text) =\u0026gt; { scoreText.text = text; } scene.onBeforeRenderObservable.add(() =\u0026gt; { if(intersecting === 0){ framecount++; if(framecount \u0026gt; 20){ highScoreText.text = \u0026quot;Highscore: \u0026quot; + highscore; score = 0; changeValueHeader(\u0026quot;Score: \u0026quot; + score) } } else{ framecount = 0; } if(score \u0026gt; highscore){ highscore = score; } }); for(let i = 0; i \u0026lt;= numberOfBoxes; i++){ let environmentBox = BABYLON.MeshBuilder.CreateBox(\u0026quot;box\u0026quot;, {diameter: 2, segments: 32}, scene); environmentBox.scaling = new BABYLON.Vector3(2,0.25,5); environmentBox.position.z = (i * environmentBox.scaling.z); let environmentMaterial = new BABYLON.StandardMaterial(\u0026quot;myMaterial\u0026quot;, scene); environmentMaterial.diffuseColor = new BABYLON.Color3(0, Math.random(), 0.5); environmentBox.material = environmentMaterial; environmentBoxes.push(environmentBox); box.actionManager.registerAction( new BABYLON.ExecuteCodeAction({ trigger: BABYLON.ActionManager.OnIntersectionEnterTrigger, parameter: {mesh: environmentBox}}, function() { score += 1; changeValueHeader(\u0026quot;Score: \u0026quot; + score); BABYLON.Animation.CreateAndStartAnimation(\u0026quot;changeColor\u0026quot;, box, \u0026quot;material.diffuseColor\u0026quot;, 60, 5, box.material.diffuseColor , environmentBox.material.diffuseColor, 0); BABYLON.Animation.CreateAndStartAnimation(\u0026quot;changeColor\u0026quot;, environmentBox, \u0026quot;material.diffuseColor\u0026quot;, 60, 5, environmentBox.material.diffuseColor, BABYLON.Color3.White, 0); const ghostBox = BABYLON.MeshBuilder.CreateBox(\u0026quot;ghostBox\u0026quot;, {diameter: 2, segments: 32}, scene); ghostBox.position = box.position.clone(); ghostBoxMaterial.diffuseColor = environmentBox.material.diffuseColor; ghostBox.material = ghostBoxMaterial; const visibility = BABYLON.Animation.CreateAndStartAnimation(\u0026quot;changeVisibility\u0026quot;, ghostBox, \u0026quot;visibility\u0026quot;, 60, 30, 1, 0, 0, null, () =\u0026gt; {ghostBox.dispose()}); scene.onBeforeRenderObservable.add(() =\u0026gt; { if( ghostBox.position.z \u0026gt; - 10){ ghostBox.position.z -= (scene.deltaTime / (speed - (score \u0026lt; 75 ? score : 75))); } }); visibility.disposeOnEnd = true; environmentBox.material.diffuseColor = BABYLON.Color3.White(); intersecting++; } ) ); box.actionManager.registerAction( new BABYLON.ExecuteCodeAction({ trigger: BABYLON.ActionManager.OnIntersectionExitTrigger, parameter: {mesh: environmentBox}}, function() { intersecting--; } ) ); } scene.onBeforeRenderObservable.add(() =\u0026gt; { for(let i = 0; i \u0026lt;= numberOfBoxes; i++){ const currentBox = environmentBoxes[i]; const previousBox = environmentBoxes[i \u0026gt; 0 ? i - 1 : numberOfBoxes] if( currentBox.position.z \u0026gt; -10){ currentBox.position.z -= (scene.deltaTime / (speed - (score \u0026lt; 75 ? score : 75))); } else { currentBox.position.z = previousBox.position.z + 5 const random = Math.random(); currentBox.material.diffuseColor = new BABYLON.Color3(0, Math.random(), 0.5); if(random \u0026lt; 0.3){ currentBox.position.x = -2 } else if (random \u0026gt; 0.3 \u0026amp;\u0026amp; random \u0026lt; 0.6){ currentBox.position.x = 0 } else{ currentBox.position.x = 2 } } } } ); scene.onKeyboardObservable.add((kbInfo) =\u0026gt; { if(kbInfo.event.key === \u0026quot;1\u0026quot;){ if(score \u0026lt; 50){ BABYLON.Animation.CreateAndStartAnimation(\u0026quot;boxmove\u0026quot;, box, \u0026quot;position.x\u0026quot;, 60, 5, box.position.x, -2, 0); } else{ box.position.x = -2 } } if(kbInfo.event.key === \u0026quot;2\u0026quot;){ if(score \u0026lt; 50){ BABYLON.Animation.CreateAndStartAnimation(\u0026quot;boxmove\u0026quot;, box, \u0026quot;position.x\u0026quot;, 60, 5, box.position.x, 0, 0); } else{ box.position.x = 0 } } if(kbInfo.event.key === \u0026quot;3\u0026quot;){ if(score \u0026lt; 50){ BABYLON.Animation.CreateAndStartAnimation(\u0026quot;boxmove\u0026quot;, box, \u0026quot;position.x\u0026quot;, 60, 5, box.position.x, 2, 0); } else{ box.position.x = 2 } } }); var light = new BABYLON.HemisphericLight(\u0026quot;light\u0026quot;, new BABYLON.Vector3(0, 1, 0), scene); return scene; }; And here\u0026rsquo;s my highscore :D\nConclusion\u003e Conclusion # To conclude I\u0026rsquo;m happy with what I\u0026rsquo;ve made, it\u0026rsquo;s not far off from my original goal except that it\u0026rsquo;s still all in the Playground. I did let myself get carried away with the particle system investigation, but I guess that\u0026rsquo;s inevitable. The next step is to move this to a local project, which I can then upload to itch.io and get some statistics, see if people would be able to find and play this game.\n","date":"13 December 2022","permalink":"/posts/babylonjs/","section":"","summary":"Introduction\u003e Introduction # Like many others, I\u0026rsquo;ve always had the dream to develop games, but I\u0026rsquo;ve also have fallen into the very common trap of exploding the scope of the game I\u0026rsquo;m trying to make and then not being able to finish that project.","title":"Creating a casual game with BabylonJS"},{"content":"","date":"13 December 2022","permalink":"/tags/playground/","section":"Tags","summary":"","title":"Playground"},{"content":"Introduction\u003e Introduction # Hello and welcome! This is the first post in this blog. This blog is meant as a way for me to keep track of all the little projects I want to do, and how those projects went.\nHugo\u003e Hugo # This first project was setting up this website with Hugo, so for my first blog I might as well share how the experience has been. While a lot of people got their start in software engineering through making websites, I\u0026rsquo;ve not come down this path so this is my experience unburdoned by any prior website-making experience. Hugo is a tool to generate a static website through markdown pages. You write your blogposts and general pages in the markdown format, and it generates all the html/css etc. I really like this idea, no live updates or cookies or javascript anything to maintain or worry about.\nIt\u0026rsquo;s honestly been as easy as one could resonably expect, I had to install \u0026lsquo;go\u0026rsquo; which was a 0.5 gig dependency and I could install hugo through Homebrew. I roughly followed the quickstart tutorial offered by Hugo themselves.\nTemplates\u003e Templates # After running hugo new site quickstart you\u0026rsquo;ve got the project setup all complete. It was a lot of fun being able to immidiately look through all the pretty templates available without really having to do a lot of reading. Installing them was a bit odd, since you have to git clone them straight into the generated themes folder. I guess I\u0026rsquo;m a bit spoiled with npm, where it will automatically download dependencies to the correct folder. It\u0026rsquo;s not a big deal at all, but it\u0026rsquo;s easy to forget. I\u0026rsquo;ve seen people solve this problem by slightly modifying their git clone to git clone linktogitrepo themes/nameoftemplate. Which will automatically \u0026lsquo;install\u0026rsquo; the project in the themes folder with the name of your choosing without having to switch directories in your terminal.\nIt\u0026rsquo;s honestly a minor inconvenience but it got me stuck on a weird error when I accidentaly tried to start the server through hugo start in the themes folder. This gives you the following error:\nError: Unable to locate config file or config directory. Perhaps you need to create a new site. Run `hugo help new` for details. It did take me a bit to figure out that my site was fine, I was just in the wrong folder.\nAfter installing a great looking theme, you can set it in the config.toml file. The first theme I tried was using .yaml instead which seemed fine enough for me first. But as far as I can see, it seems to be the old way of doing things and after getting stuck trying to change an icon, I just looked for a different theme that did \u0026lsquo;support\u0026rsquo; a toml config through their configuration. I currently landed on the hello-friend-ng theme.\nThis could all change in the future though. The great thing about the theme system is that you can change the whole look of the website without having to change the individual pages. All in all going from nothing to writing this first entry took me about one weekend. If you give it more priority than I have though, you could have your first website set up in a day.\n","date":"11 December 2022","permalink":"/posts/my-first-post/","section":"","summary":"Introduction\u003e Introduction # Hello and welcome! This is the first post in this blog. This blog is meant as a way for me to keep track of all the little projects I want to do, and how those projects went.","title":"Creating a site using Hugo"},{"content":"","date":"11 December 2022","permalink":"/tags/go/","section":"Tags","summary":"","title":"Go"},{"content":"Future plans:\u003e Future plans: # Publishing a game PixiJS Godot Creating a successful iOS/Android app. A puzzle game. Unreal Engine ","date":"11 December 2022","permalink":"/plans/","section":"","summary":"Future plans:\u003e Future plans: # Publishing a game PixiJS Godot Creating a successful iOS/Android app. A puzzle game. Unreal Engine ","title":"Plans"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]